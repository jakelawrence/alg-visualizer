{"version":3,"sources":["components/Head/head.jsx","components/Visualizer/visualizer.jsx","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","App.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/selectionSort.js","reportWebVitals.js","index.js"],"names":["Head","state","type","this","props","sortType","description","speed","className","onClick","changeSortType","id","changeSpeed","Component","nextLineFunc","w","parseInt","window","innerWidth","choices","document","getElementsByClassName","choicesSelected","i","length","nextLineChoice","innerHTML","replace","nextLineChoiceSelected","spaceChoice","spaceChoiceSelected","addEventListener","Visualizer","createArray","sortMain","array","map","value","idx","style","height","createRandomArray","handleSortMain","mergeSortMain","arrayCopy","slice","animate","push","mergeSort","sortedArray","start","end","mid","Math","floor","s","main","m","merge","quickSortMain","quickSort","low","high","pi","pivot","j","temp","partition","heapSortMain","n","heapify","heapSort","largest","l","r","swap","selectionSortDesciption","App","animation_speed","sortingType","sortingInProgress","isSorted","sortingButton","min","max","random","setState","animateBubble","bubbleSort","bubbleSortMain","handleSortAnimation","animateSelection","min_id","selectionSort","selectionSortMain","animateMerge","animateQuick","animateHeap","animateAlg","lines","line","line_id","newHeight","setTimeout","backgroundColor","getElementById","bind","changeDescription","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2ffa5147.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './head.css';\n\nclass Head extends Component {\n    state = {  }\n    changeSortType (type) {\n        this.props.sortType(type)\n        this.props.description(type)\n    }\n    changeSpeed (type) {\n        this.props.speed(type)\n    }\n\n    \n    \n    render() { \n        return ( <>\n        <div className=\"title\">Algorithm Visualizer</div>\n        <div className=\"options\">\n            <div className=\"selectAlg\">\n                <div className=\"selectTitle\">SELECT ALGORITHM</div>\n                <div className=\"selectChoices\">\n                    <div onClick={()=>this.changeSortType(\"bubble\")} id=\"bubble\" className=\"choiceSelected\">BUBBLE SORT</div>\n                    <div onClick={()=>this.changeSortType(\"selection\")} id=\"selection\" className=\"choice\">SELECTION SORT</div>\n                    <div onClick={()=>this.changeSortType(\"merge\")} id=\"merge\" className=\"choice\">MERGE SORT</div>\n                    <div onClick={()=>this.changeSortType(\"quick\")} id=\"quick\" className=\"choice\">QUICK SORT</div>\n                    <div onClick={()=>this.changeSortType(\"heap\")} id=\"heap\" className=\"choice\">HEAP SORT</div>\n                </div>\n            </div>\n            <div className=\"selectSpeed\">\n                <div className=\"selectTitle\">SELECT SPEED</div>\n                <div className=\"selectChoices\">\n                    <div onClick={()=>this.changeSpeed(\"veryFast\")} id=\"veryFast\" className=\"choiceSelected\">VERY FAST</div>\n                    <div onClick={()=>this.changeSpeed(\"fast\")} id=\"fast\" className=\"choice\">FAST</div>\n                    <div onClick={()=>this.changeSpeed(\"normal\")} id=\"normal\" className=\"choice\">NORMAL</div>\n                    <div onClick={()=>this.changeSpeed(\"slow\")} id=\"slow\" className=\"choice\">SLOW</div>\n                    <div onClick={()=>this.changeSpeed(\"molasses\")} id=\"molasses\" className=\"choice\">SLOTH</div>\n                </div>\n            </div>\n        </div>\n        \n        \n        \n        </> );\n    }\n}\n\nvar nextLineFunc = function(){\n    var w = parseInt(window.innerWidth);\n    if (w < 750) {\n        let choices = document.getElementsByClassName(\"choice\")\n        let choicesSelected = document.getElementsByClassName(\"choiceSelected\")\n        \n        for (let i = 0; i < choices.length; i++) {\n            let text = choices[i].innerHTML\n            var nextLineChoice = text.replace(\" \", \"<br />\");\n            choices[i].innerHTML = nextLineChoice\n        }\n        for (let i = 0; i < choicesSelected.length; i++) {\n            let text = choicesSelected[i].innerHTML\n            var nextLineChoiceSelected = text.replace(\" \", \"<br />\");\n            choicesSelected[i].innerHTML = nextLineChoiceSelected\n        }\n    }\n    if (w > 750) {\n        let choices = document.getElementsByClassName(\"choice\")\n        let choicesSelected = document.getElementsByClassName(\"choiceSelected\")\n        \n        for (let i = 0; i < choices.length; i++) {\n            let text = choices[i].innerHTML\n            var spaceChoice = text.replace(\"<br>\", \" \");\n            choices[i].innerHTML = spaceChoice\n        }\n        for (let i = 0; i < choicesSelected.length; i++) {\n            let text = choicesSelected[i].innerHTML\n            var spaceChoiceSelected = text.replace(\"<br>\", \" \");\n            choicesSelected[i].innerHTML = spaceChoiceSelected\n        }\n    }\n   \n}\nwindow.addEventListener(\"resize\", nextLineFunc);\nwindow.addEventListener(\"load\", nextLineFunc);\n\n\nexport default Head;","import React, { Component } from 'react';\nimport './visualizer.css';\n\nclass Visualizer extends Component {\n    state = { }\n    createRandomArray () {\n      this.props.createArray()\n    }\n    handleSortMain () {\n      this.props.sortMain()\n    }\n   \n    render() { \n      const array = this.props.array;\n      return (<> <div className=\"visualizerContainer\">\n        <div className=\"visualizer\">\n          {array.map((value, idx) => (\n            <div\n              style={{ height: value + \"px\" }}\n              className=\"line\"\n              key={idx}\n            ></div>\n          ))}\n        </div>\n      \n        </div> \n        \n        <div className=\"btnContainer\">\n          <div onClick={() => this.createRandomArray()} className=\"btn\">GENERATE NEW SET</div>\n          <div onClick={() => this.handleSortMain()} className=\"btn\">START SORTING</div>\n        </div>\n      <div className=\"description\">\n        <div className=\"descriptionText\">{this.props.description}</div>\n      </div>\n        </>\n      );\n    }\n}\n \n\n\nexport default Visualizer;","export function mergeSortMain(array) {\n  if (array.length <= 1) return array;\n  const arrayCopy = array.slice();\n  const animate = [];\n  animate.push({ type: \"start\" });\n  mergeSort(array, 0, array.length - 1, arrayCopy, animate);\n  animate.push({ type: \"finish\" });\n  let sortedArray = array\n  return {\n    animate,\n    sortedArray\n  };\n}\n\nfunction mergeSort(array, start, end, arrayCopy, animate) {\n  if (end === start) return;\n  const mid = Math.floor((start + end) / 2);\n  mergeSort(arrayCopy, start, mid, array, animate);\n  mergeSort(arrayCopy, mid + 1, end, array, animate);\n\n  merge(array, start, mid, end, arrayCopy, animate);\n}\n\nfunction merge(array, start, mid, end, arrayCopy, animate) {\n  let s = start;\n  let main = start;\n  let m = mid + 1;\n\n  while (s <= mid && m <= end) {\n    animate.push({ id: s, type: \"search\" });\n    animate.push({ id: m, type: \"search_2\" });\n    animate.push({ id: s, type: \"unsearch\" });\n    animate.push({ id: m, type: \"unsearch\" });\n    if (arrayCopy[s] <= arrayCopy[m]) {\n      animate.push({ id: main, height: arrayCopy[s], type: \"swap\" });\n      array[main++] = arrayCopy[s++];\n    } else {\n      animate.push({ id: main, height: arrayCopy[m], type: \"swap\" });\n      array[main++] = arrayCopy[m++];\n    }\n  }\n  while (s <= mid) {\n    // animate.push({ id: s, type: \"search\" });\n\n    animate.push({ id: main, height: arrayCopy[s], type: \"swap\" });\n    // animate.push({ id: s, type: \"unsearch\" });\n    array[main++] = arrayCopy[s++];\n  }\n  while (m <= end) {\n    // animate.push({ id: m, type: \"search_2\" });\n    animate.push({ id: main, height: arrayCopy[m], type: \"swap\" });\n    // animate.push({ id: m, type: \"unsearch\" });\n    array[main++] = arrayCopy[m++];\n  }\n}\n","export function quickSortMain(array) {\n  const arrayCopy = array.slice();\n  const animate = [];\n  animate.push({ type: \"start\" });\n  quickSort(arrayCopy, 0, arrayCopy.length - 1, animate);\n  animate.push({ type: \"finish\" });\n  let sortedArray = arrayCopy\n  return {\n    animate,\n    sortedArray\n  };\n  \n}\n\nfunction quickSort(array, low, high, animate) {\n  if (low < high) {\n    let pi = partition(array, low, high, animate);\n    quickSort(array, low, pi - 1, animate);\n    quickSort(array, pi + 1, high, animate);\n  }\n}\n\nfunction partition(array, low, high, animate) {\n  let pivot = array[high];\n  animate.push({ id: high, type: \"search\" });\n  //animate.push({ id: high, type: \"setPivot\" });\n\n  let i = low - 1;\n  for (let j = low; j < high; j++) {\n    animate.push({ id: j, type: \"search_2\" });\n    //animate.push({ id: j, type: \"setSearch\" });\n    if (array[j] < pivot) {\n      i++;\n\n      animate.push({ id: i, height: array[j], type: \"swap\" });\n      animate.push({ id: j, height: array[i], type: \"swap\" });\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    animate.push({ id: j, type: \"unsearch\" });\n    //animate.push({ id: j, type: \"unsetSearch\" });\n  }\n\n  animate.push({ id: i + 1, height: array[high], type: \"swap\" });\n  animate.push({ id: high, height: array[i + 1], type: \"swap\" });\n  animate.push({ id: high, type: \"unsearch\" });\n  //animate.push({ id: high, type: \"unsetPivot\" });\n  let temp = array[i + 1];\n  array[i + 1] = array[high];\n  array[high] = temp;\n\n  return i + 1;\n}\n","export function heapSortMain(array) {\n  const arrayCopy = array.slice();\n  const animate = [];\n  animate.push({ type: \"start\" });\n  heapSort(arrayCopy, animate);\n  animate.push({ type: \"finish\" });\n  let sortedArray = arrayCopy\n  return{\n    animate,\n    sortedArray\n  };\n}\n\nfunction heapSort(array, animate) {\n  const n = array.length;\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\n    animate.push({ id: i, type: \"search_2\" });\n    heapify(array, n, i, animate);\n    animate.push({ id: i, type: \"unsearch\" });\n  }\n  for (let i = n - 1; i > 0; i--) {\n    animate.push({ id: 0, height: array[i], type: \"swap\" });\n    animate.push({ id: i, height: array[0], type: \"swap\" });\n    let temp = array[0];\n    array[0] = array[i];\n    array[i] = temp;\n    heapify(array, i, 0, animate);\n  }\n}\n\nfunction heapify(array, n, i, animate) {\n  let largest = i;\n\n  let l = 2 * i + 1;\n  let r = 2 * i + 2;\n  if (l < n && array[l] > array[largest]) {\n    largest = l;\n    animate.push({ id: i, type: \"search_2\" });\n    animate.push({ id: i, type: \"unsearch\" });\n  }\n  if (r < n && array[r] > array[largest]) {\n    largest = r;\n    animate.push({ id: i, type: \"search_2\" });\n    animate.push({ id: i, type: \"unsearch\" });\n  }\n  if (largest !== i) {\n    animate.push({ id: i, height: array[largest], type: \"swap\" });\n    animate.push({ id: largest, height: array[i], type: \"swap\" });\n    let swap = array[i];\n    array[i] = array[largest];\n    array[largest] = swap;\n\n    heapify(array, n, largest, animate);\n  }\n}\n","import React, { Component } from 'react';\nimport Head from './components/Head/head.jsx'\nimport Visualizer from './components/Visualizer/visualizer.jsx'\n\nimport './App.css';\nimport { mergeSortMain } from \"./sortingAlgorithms/mergeSort.js\";\nimport { quickSortMain } from \"./sortingAlgorithms/quickSort.js\";\nimport { selectionSortMain } from \"./sortingAlgorithms/selectionSort.js\";\nimport { bubbleSortMain } from \"./sortingAlgorithms/bubbleSort.js\";\nimport { heapSortMain } from \"./sortingAlgorithms/heapSort.js\";\n\nconst SIZE = 200;\nconst MIN = 1;\nconst MAX = 300;\nconst COLOR_1 = \"#ffd900\";\nconst COLOR_3 = \"black\";\nconst COLOR_4 = \"red\";\n\nconst bubbleSortDesciption = \"Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the way smaller or larger elements \\\"bubble\\\" to the top of the list.\"\nconst selectionSortDesciption = \"Selection sort divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\"\nconst mergeSortDesciption = \"Merge sort is a divide and conquer algorithm that splits the list into two (nearly) equal halves and recursively divides those two lists until the lists are at their smallest unit (1). Then it compares each element with the adjacent list to sort and merge the two adjacent lists.\"\nconst quickSortDesciption = \"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.\"\nconst heapSortDesciption = \"Heap sort can be thought of as an improved selection sort: like selection sort, heap sort divides its input into a sorted and an unsorted region, and it iteratively shrinks the unsorted region by extracting the largest element from it and inserting it into the sorted region. Unlike selection sort, heap sort does not waste time with a linear-time scan of the unsorted region; rather, heap sort maintains the unsorted region in a heap data structure to more quickly find the largest element in each step.\"\n\n\n\nclass App extends Component {\n  state = { \n    array: [],\n    animation_speed: 0.1,\n    sortingType: \"bubble\",\n    sortingInProgress: false,\n    isSorted: false,\n    sortingButton: \"Start Sorting\",\n    description: selectionSortDesciption\n  }\n  componentDidMount() {\n    this.createRandomArray();\n  }\n  createRandomArray() {\n    const array = [];\n    for (let i = 0; i < SIZE; i++) {\n      array.push(randomNumber(MIN, MAX));\n    }\n    this.setState({ array });\n  }\n  handleSortMain() {\n    switch (this.state.sortingType) {\n      case \"bubble\":\n        const animateBubble = bubbleSortMain(this.state.array);\n        this.handleSortAnimation(animateBubble.animate, animateBubble.sortedArray);\n        break;\n      case \"selection\":\n        const animateSelection = selectionSortMain(this.state.array);\n        this.handleSortAnimation(animateSelection.animate, animateSelection.sortedArray);\n        break;\n      case \"merge\":\n        const animateMerge = mergeSortMain(this.state.array);\n        this.handleSortAnimation(animateMerge.animate, animateMerge.sortedArray);\n        break;\n      case \"quick\":\n        const animateQuick = quickSortMain(this.state.array);\n        this.handleSortAnimation(animateQuick.animate, animateQuick.sortedArray);\n        break;\n      case \"heap\":\n        const animateHeap = heapSortMain(this.state.array);\n        this.handleSortAnimation(animateHeap.animate, animateHeap.sortedArray);\n        break;\n      default:\n        break;\n    }\n  }\n  handleSortAnimation(animateAlg, sortedArray) {\n    for (let i = 0; i < animateAlg.length; i++) {\n      let lines = document.getElementsByClassName(\"line\");\n      let line = null;\n      let line_id = null;\n      switch (animateAlg[i].type) {\n        case \"swap\":\n          line_id = animateAlg[i].id;\n          let newHeight = animateAlg[i].height;\n          line = lines[line_id].style;\n          setTimeout(() => {\n            line.height = \"\" + newHeight + \"px\";\n          }, i * this.state.animation_speed);\n          break;\n        case \"search\":\n          line_id = animateAlg[i].id;\n          line = lines[line_id].style;\n          setTimeout(() => {\n            line.backgroundColor = COLOR_3;\n          }, i * this.state.animation_speed);\n          break;\n        case \"search_2\":\n          line_id = animateAlg[i].id;\n          line = lines[line_id].style;\n          setTimeout(() => {\n            line.backgroundColor = COLOR_4;\n          }, i * this.state.animation_speed);\n          break;\n        case \"unsearch\":\n          line_id = animateAlg[i].id;\n          line = lines[line_id].style;\n          setTimeout(() => {\n            line.backgroundColor = COLOR_1;\n          }, i * this.state.animation_speed);\n          break;\n        default:\n          break;\n      }\n    }\n    this.setState({array: sortedArray})\n  }\n  changeSortType(sortType) {\n    this.setState({ sortingType: sortType });\n    switch (sortType) {\n      case \"merge\":\n        document.getElementById(\"bubble\").className = \"choice\";\n        document.getElementById(\"selection\").className = \"choice\";\n        document.getElementById(\"merge\").className = \"choiceSelected\";\n        document.getElementById(\"quick\").className = \"choice\";\n        document.getElementById(\"heap\").className = \"choice\";\n\n        break;\n      case \"selection\":\n        document.getElementById(\"bubble\").className = \"choice\";\n        document.getElementById(\"selection\").className = \"choiceSelected\";\n        document.getElementById(\"merge\").className = \"choice\";\n        document.getElementById(\"quick\").className = \"choice\";\n        document.getElementById(\"heap\").className = \"choice\";\n\n        break;\n      case \"quick\":\n        document.getElementById(\"bubble\").className = \"choice\";\n        document.getElementById(\"selection\").className = \"choice\";\n        document.getElementById(\"merge\").className = \"choice\";\n        document.getElementById(\"quick\").className = \"choiceSelected\";\n        document.getElementById(\"heap\").className = \"choice\";\n\n        break;\n      case \"bubble\":\n        document.getElementById(\"bubble\").className = \"choiceSelected\";\n        document.getElementById(\"selection\").className = \"choice\";\n        document.getElementById(\"merge\").className = \"choice\";\n        document.getElementById(\"quick\").className = \"choice\";\n        document.getElementById(\"heap\").className = \"choice\";\n\n        break;\n      case \"heap\":\n        document.getElementById(\"bubble\").className = \"choice\";\n        document.getElementById(\"selection\").className = \"choice\";\n        document.getElementById(\"merge\").className = \"choice\";\n        document.getElementById(\"quick\").className = \"choice\";\n        document.getElementById(\"heap\").className = \"choiceSelected\";\n\n        break;\n\n      default:\n        break;\n    }\n  }\n  changeSpeed(speed) {\n    switch (speed) {\n      case \"veryFast\":\n        this.setState({ animation_speed: 0.1 });\n        document.getElementById(\"veryFast\").className = \"choiceSelected\";\n        document.getElementById(\"fast\").className = \"choice\";\n        document.getElementById(\"normal\").className = \"choice\";\n        document.getElementById(\"slow\").className = \"choice\";\n        document.getElementById(\"molasses\").className = \"choice\";\n        break;\n      case \"fast\":\n        this.setState({ animation_speed: 0.2 });\n        document.getElementById(\"veryFast\").className = \"choice\";\n        document.getElementById(\"fast\").className = \"choiceSelected\";\n        document.getElementById(\"normal\").className = \"choice\";\n        document.getElementById(\"slow\").className = \"choice\";\n        document.getElementById(\"molasses\").className = \"choice\";\n        break;\n      case \"normal\":\n        this.setState({ animation_speed: 0.5 });\n        document.getElementById(\"veryFast\").className = \"choice\";\n        document.getElementById(\"fast\").className = \"choice\";\n        document.getElementById(\"normal\").className = \"choiceSelected\";\n        document.getElementById(\"slow\").className = \"choice\";\n        document.getElementById(\"molasses\").className = \"choice\";\n        break;\n      case \"slow\":\n        this.setState({ animation_speed: 4 });\n        document.getElementById(\"veryFast\").className = \"choice\";\n        document.getElementById(\"fast\").className = \"choice\";\n        document.getElementById(\"normal\").className = \"choice\";\n        document.getElementById(\"slow\").className = \"choiceSelected\";\n        document.getElementById(\"molasses\").className = \"choice\";\n        break;\n      case \"molasses\":\n        this.setState({ animation_speed: 7 });\n        document.getElementById(\"veryFast\").className = \"choice\";\n        document.getElementById(\"fast\").className = \"choice\";\n        document.getElementById(\"normal\").className = \"choice\";\n        document.getElementById(\"slow\").className = \"choice\";\n        document.getElementById(\"molasses\").className = \"choiceSelected\";\n        break;  \n      default:\n        break;\n    }\n  }\n  changeDescription(description){\n    switch (description) {\n      case \"bubble\":\n        this.setState({ description: bubbleSortDesciption });\n        break;\n      case \"selection\":\n        this.setState({ description: selectionSortDesciption });\n        break;\n      case \"merge\":\n        this.setState({ description: mergeSortDesciption });\n        break;\n      case \"quick\":\n        this.setState({ description: quickSortDesciption });\n        break;\n      case \"heap\":\n        this.setState({ description: heapSortDesciption });\n        break;\n      default:\n        break;\n    }\n  }\n  render() { \n    return (\n      <div className=\"App\">\n        <div className=\"main\">\n          \n          <Head\n          sortType={this.changeSortType.bind(this)}\n          speed={this.changeSpeed.bind(this)}\n          description={this.changeDescription.bind(this)}\n          />\n          <Visualizer\n          createArray={this.createRandomArray.bind(this)}\n          sortMain={this.handleSortMain.bind(this)}\n          array={this.state.array}\n          description={this.state.description}\n          />\n          \n        </div>\n        \n        \n      </div>\n    );\n  }\n}\nfunction randomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n\nexport default App;\n","export function bubbleSortMain(array) {\n  const arrayCopy = array.slice();\n  const animate = [];\n  animate.push({ type: \"start\" });\n  bubbleSort(arrayCopy, animate);\n  animate.push({ type: \"finish\" });\n  let sortedArray = arrayCopy\n  return{\n    animate,\n    sortedArray\n  };\n}\n\nfunction bubbleSort(array, animate) {\n  var n = array.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      animate.push({ id: j, type: \"search\" });\n      animate.push({ id: j + 1, type: \"search_2\" });\n      if (array[j] > array[j + 1]) {\n        animate.push({ id: j, height: array[j + 1], type: \"swap\" });\n        animate.push({ id: j + 1, height: array[j], type: \"swap\" });\n        let temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n      animate.push({ id: j, type: \"unsearch\" });\n      animate.push({ id: j + 1, type: \"unsearch\" });\n    }\n  }\n}\n","export function selectionSortMain(array) {\n  const arrayCopy = array.slice();\n  const animate = [];\n  animate.push({ type: \"start\" });\n  selectionSort(arrayCopy, arrayCopy.length, animate);\n  animate.push({ type: \"finish\" });\n  let sortedArray = array\n  return {\n    animate,\n    sortedArray\n  };\n}\nfunction selectionSort(array, n, animate) {\n  let i, min_id;\n  for (i = 0; i < n - 1; i++) {\n    min_id = i;\n    animate.push({ id: min_id, type: \"search\" });\n    for (let j = i + 1; j < n; j++) {\n      animate.push({ id: j, type: \"search_2\" });\n      if (array[j] < array[min_id]) {\n        animate.push({ id: min_id, type: \"unsearch\" });\n        min_id = j;\n        animate.push({ id: j, type: \"search\" });\n      } else {\n        animate.push({ id: j, type: \"unsearch\" });\n      }\n    }\n    if (min_id !== i) {\n      animate.push({ id: i, height: array[min_id], type: \"swap\" });\n      animate.push({ id: min_id, height: array[i], type: \"swap\" });\n      var swap = array[i];\n      array[i] = array[min_id];\n      array[min_id] = swap;\n    }\n    animate.push({ id: min_id, type: \"unsearch\" });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}